{"id":"dabd5172-7aa8-4511-bd3f-d72ba5513cbc","zed":"context","version":"0.4.0","text":"\n\n\n```md website/posts/changelog-and-friends-frontend-ai.md\n---\ndate: 2025-03-14\ntitle: AI and the modern frontend on the Changelog & Friends podcast\nauthor: jlong\nsummary: Back in January, I posted on LinkedIn about using AI to build a documentation site for Opine. This prompted Adam Stokoviak to reach out about joining him on the Changelog & Friends podcast to talk about AI and the modern frontend. Adam and I have been friends for a very long time now, having collaborated on The Sass Way together. He's a great host, and really put me at ease as we talked about how I'm using AI in my own workflow as a designer. On the show we discussed how I'm integrating AI into my workflow as a designer. We also talked about Framer and Figma, Next.js, and other topics.\ncategories: ['design', 'ai']\n---\n\n\nBack in January, [I posted on LinkedIn](https://www.linkedin.com/posts/wiseheart_last-week-i-created-a-new-getting-started-activity-7271986257239359488-5E6C) about using AI to build a documentation site for Opine. This prompted Adam Stokoviak to reach out about joining him on the [Changelog & Friends podcast](https://changelog.com/friends/84) to talk about AI and the modern frontend.\n\nAdam and I have been friends for a very long time now, having collaborated on *The Sass Way* together. He's a great host, and really put me at ease as we talked about how I'm using AI in my own workflow as a designer. We also talked about [Framer](https://framer.com) and [Figma](https://figma.com), [Next.js](https://nextjs.org), and other topics.\n\n<audio data-theme=\"night\" data-src=\"https://changelog.com/friends/84/embed\" src=\"https://op3.dev/e/https://cdn.changelog.com/uploads/friends/84/changelog--friends-84.mp3\" preload=\"none\" class=\"changelog-episode\" controls></audio>\n\n<Script src=\"//cdn.changelog.com/embed.js\" />\n\n[Changelog & Friends 84: Friends on the Frontend](https://changelog.com/friends/84) – Listen on [Changelog.com](https://changelog.com)\n\nEvery time I listen to the Changelog I learning something new about technology. Adam has a gift for drawing people out and engaging in genunine conversation. It was a joy to catch up with him and talk about some of the things I'm excited about.\n\nIf you're looking for more resources on AI, here are a few of the tools I've been playing with lately:\n\n* [ChatGPT](https://chatgpt.com/)\n* [Midjourney](https://www.midjourney.com/explore?tab=top)\n* [Generated.photos](https://generated.photos/)\n* [Bolt.new](https://bolt.new/)\n* [Lovable](https://lovable.dev/)\n* [Cursor](https://www.cursor.com)\n```\n\n```js website/mdx-components.js\n// This file allows you to provide custom React components\n// to be used in mdx files. you can import and use any\n// react component you want, including components from\n// other libraries.\n\nimport Image from \"next/image\";\nimport Script from \"next/script\";\n\n// This file is required to use MDX in `app` directory.\nexport function useMDXComponents(components) {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    // h1: ({ children }) => <h1 style={{ fontSize: \"100px\" }}>{children}</h1>,\n    ...components,\n    Image: (props) => <Image {...props} />,\n    Script: (props) => <Script {...props} />,\n  };\n}\n```\n\n```js website/contentlayer.config.js\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypePrettyCode from \"rehype-pretty-code\"\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.md`,\n  contentType: 'mdx',\n  fields: {\n    date: {\n      type: 'date',\n      required: true\n    },\n    title: {\n      type: 'string',\n      required: true\n    },\n    subtitle: {\n      type: 'string'\n    },\n    author: {\n      type: 'string',\n      required: true\n    },\n    summary: {\n      type: 'string',\n      required: true\n    },\n    categories: {\n      type: 'list',\n      of: { type: 'string' },\n      required: true\n    }\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/blog/${post._raw.flattenedPath}`\n    }\n  }\n}))\n\nexport default makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypePrettyCode, {\n          theme: 'github-light',\n          keepBackground: false\n        }\n      ]\n    ]\n  },\n  contentDirPath: 'posts',\n  documentTypes: [Post]\n})\n```\n\n\nI'm using ContentLayer to manage my blog posts with MDX. It provides a powerful and flexible way to create and manage blog posts using MDX, a syntax extension for Markdown that allows you to write JSX and import React components directly into your Markdown files.\n\nBut the Next.js Script tag is not working. I get this error:\n\nUnhandled Runtime Error\nError: Expected component `Script` to be defined: you likely forgot to import, pass, or provide it.\nIt’s referenced in your code at `16:1-16:46` in `/Users/jlong/Workspaces/32pixels/website/posts/_mdx_bundler_entry_point-65601651-de2d-44e5-8d51-50a83ab62a21.mdx`\nThe error message indicates that the `Script` component is not correctly imported or provided in the MDX file. To fix this issue, make sure that the `Script` component is properly imported and provided in the `useMDXComponents` function in the `website/mdx-components.js` file. \n\nBased on the code snippets provided, it looks like you have already imported the `Script` component in `mdx-components.js`. However, ensure that the `useMDXComponents` function is correctly returning the `Script` component along with other custom components.\n\nHere's an example of how you can modify the `useMDXComponents` function in `mdx-components.js` to include the `Script` component:\n\n```js\nimport Image from \"next/image\";\nimport Script from \"next/script\";\n\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n    Image: (props) => <Image {...props} />,\n    Script: (props) => <Script {...props} />,\n  };\n}\n```\n\nAfter making this change, ensure that the `useMDXComponents` function is correctly passed to the MDX provider in your Next.js application so that the `Script` component is available for use in MDX files. This should resolve the \"Expected component `Script` to be defined\" error.\nHow do I pass it to the MDX provider in my Next.js application?\nTo pass the custom MDX components defined in the `useMDXComponents` function to the MDX provider in your Next.js application, you need to update the configuration in the `_app.js` file located in the `pages` directory of your Next.js project.\n\nHere's an example of how you can set up the MDX provider with your custom components in the `_app.js` file:\n\n```js\nimport { MDXProvider } from '@mdx-js/react';\nimport { useMDXComponents } from '../website/mdx-components';\n\n// This custom App component is used to wrap the entire application\nfunction MyApp({ Component, pageProps }) {\n  const components = useMDXComponents({}); // Pass any initial components if needed\n\n  return (\n    <MDXProvider components={components}>\n      <Component {...pageProps} />\n    </MDXProvider>\n  );\n}\n\nexport default MyApp;\n```\n\nIn this code snippet:\n1. Import `MDXProvider` from `@mdx-js/react`.\n2. Import the `useMDXComponents` function from your `website/mdx-components.js` file.\n3. Create a new `MyApp` component that wraps your entire application.\n4. Initialize the `components` object by calling `useMDXComponents({})` to get the custom components.\n5. Render the `Component` (your page component) within the `MDXProvider` component, passing the `components` object as a prop.\n\nBy setting up the MDX provider in this way, you ensure that your custom MDX components, including the `Script` component, are available and can be used within MDX files throughout your Next.js application. This should properly provide the `Script` component and resolve the error you were encountering.\nHow do I configure Contentlayer to use useMDXComponents?\nIn the Contentlayer configuration, you can enhance the MDX rendering with custom components by passing the `useMDXComponents` function to the MDX configuration. This allows you to provide additional React components for use in MDX files.\n\nTo configure Contentlayer to use `useMDXComponents`, you can modify the `website/contentlayer.config.js` file as follows:\n\n1. Import the `useMDXComponents` function from your `website/mdx-components.js` file.\n2. Pass the `useMDXComponents` function to the `mdx` configuration in the `makeSource` function.\n\nHere's how you can update your `contentlayer.config.js` file:\n\n```js\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport { useMDXComponents } from './mdx-components'; // Import the useMDXComponents function\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.md`,\n  contentType: 'mdx',\n  fields: {\n    // Define your fields here\n  },\n  computedFields: {\n    // Define your computed fields here\n  }\n}))\n\nexport default makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypePrettyCode, {\n          theme: 'github-light',\n          keepBackground: false\n        }\n      ]\n    ],\n    useMDXComponents // Pass the useMDXComponents function\n  },\n  contentDirPath: 'posts',\n  documentTypes: [Post]\n})\n```\n\nIn this updated configuration:\n1. The `useMDXComponents` function is imported from `website/mdx-components.js`.\n2. The `useMDXComponents` function is passed directly as a property in the `mdx` configuration object within `makeSource`.\n\nBy including the `useMDXComponents` function in the `mdx` configuration of Contentlayer, you ensure that the custom React components defined in `useMDXComponents` are available for use in MDX files when rendering content through Contentlayer. This allows you to seamlessly integrate your custom MDX components with the content managed by Contentlayer.\nI'm getting this error:\n\nError: Expected component `Script` to be defined: you likely forgot to import, pass, or provide it.\nIt’s referenced in your code at `16:1-16:46` in `/Users/jlong/Workspaces/32pixels/website/posts/_mdx_bundler_entry_point-65601651-de2d-44e5-8d51-50a83ab62a21.mdx`\n    at stringify (<anonymous>)\n    \nHere's my contentlayer config:\n\n```js website/contentlayer.config.js\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport { useMDXComponents } from \"mdx-components\";\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.md`,\n  contentType: \"mdx\",\n  fields: {\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    subtitle: {\n      type: \"string\",\n    },\n    author: {\n      type: \"string\",\n      required: true,\n    },\n    summary: {\n      type: \"string\",\n      required: true,\n    },\n    categories: {\n      type: \"list\",\n      of: { type: \"string\" },\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (post) => `/blog/${post._raw.flattenedPath}`,\n    },\n  },\n}));\n\nexport default makeSource({\n  mdx: {\n    rehypePlugins: [\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-light\",\n          keepBackground: false,\n        },\n      ],\n    ],\n    useMDXComponents,\n  },\n  contentDirPath: \"posts\",\n  documentTypes: [Post],\n});\n```\n\n\nThe error message indicates that the `Script` component is not correctly defined or provided in the MDX context, even though you have configured the `useMDXComponents` function in your Contentlayer configuration. \n\nTo resolve the issue, you need to ensure that the `useMDXComponents` function is correctly defining and providing the `Script` component. \n\nHere's a potential solution to address the error:\n\n1. Update the `useMDXComponents` function in your `mdx-components.js` file to include the `Script` component:\n\n```js\nimport Image from \"next/image\";\nimport Script from \"next/script\";\n\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n    Image,\n    Script, // Ensure Script component is included\n  };\n}\n```\n\n2. Make sure that the `Script` component is directly imported and provided in the `useMDXComponents` function.\n\nBy including the `Script` component explicitly in the `useMDXComponents` function, you ensure that it is defined and made available for use within MDX files. This should resolve the \"Expected component `Script` to be defined\" error when using the component in your MDX content managed by Contentlayer.\nI changed the `useMDXComponents` function to include the `Script` component like you mentioned above.\n\n```js website/mdx-components.js\n// This file allows you to provide custom React components\n// to be used in mdx files. you can import and use any\n// react component you want, including components from\n// other libraries.\n\nimport Image from \"next/image\";\nimport Script from \"next/script\";\n\n// This file is required to use MDX in `app` directory.\nexport function useMDXComponents(components) {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    // h1: ({ children }) => <h1 style={{ fontSize: \"100px\" }}>{children}</h1>,\n    ...components,\n    Image,\n    Script,\n  };\n}\n```\n\n\nBut now I'm getting this error:\n\nUnhandled Runtime Error\nError: Cannot access Image.propTypes on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.\nThe error message indicates that attempting to access `Image.propTypes` on the server-side in a React component is not allowed. This issue arises because Next.js runs server-side for the initial rendering, and trying to access `Image.propTypes` directly on the server-side is not supported.\n\nTo resolve this error, you can adjust the way the `Image` component is passed and utilized in the `useMDXComponents` function to ensure server-side compatibility:\n\n1. Modify the `useMDXComponents` function in `mdx-components.js` as follows to pass the `Image` component name without accessing specific properties:\n\n```js\nimport Image from \"next/image\";\nimport Script from \"next/script\";\n\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n    Image: Image, // Pass the component without dotting into properties\n    Script: Script, // Do the same for the Script component\n  };\n}\n```\n\nBy making this adjustment, you're passing the component directly without trying to access its properties on the server side.\n\nAfter updating the `useMDXComponents` function in this manner, the `Image` and `Script` components should be accessible and usable without causing the \"Cannot access Image.propTypes on the server\" error.\nStill causing the same error.\nSince we're dealing with server component issues in Next.js, let's try marking the components as client components explicitly. Create a new client component wrapper for both Image and Script.\n\n1. First, create a new file `website/components/MDXComponents.js`:\n\n```jsx\n'use client'\n\nimport Image from \"next/image\";\nimport Script from \"next/script\";\n\nexport const MDXImage = (props) => <Image {...props} />;\nexport const MDXScript = (props) => <Script {...props} />;\n```\n\n2. Then update your `website/mdx-components.js`:\n\n```jsx\nimport { MDXImage, MDXScript } from './components/MDXComponents'\n\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n    Image: MDXImage,\n    Script: MDXScript,\n  }\n}\n```\n\nThis approach creates client-side component wrappers for both Image and Script, which should resolve the server component error. The `'use client'` directive ensures that these components are properly handled on the client side.\n\nIf you're still experiencing issues, you might also need to mark your MDX content component as a client component. Let me know if you need help with that part as well.\nStill getting the error about the Script tag not being a defined.\n\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1547}}},{"id":{"replica_id":0,"value":534},"start":4903,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1548}}},{"id":{"replica_id":0,"value":535},"start":6105,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1549}}},{"id":{"replica_id":0,"value":585},"start":6169,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1550}}},{"id":{"replica_id":0,"value":586},"start":7731,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1551}}},{"id":{"replica_id":0,"value":728},"start":7788,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1552}}},{"id":{"replica_id":0,"value":729},"start":9750,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1553}}},{"id":{"replica_id":0,"value":914},"start":11271,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1554}}},{"id":{"replica_id":0,"value":915},"start":12426,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1555}}},{"id":{"replica_id":0,"value":1101},"start":13350,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1556}}},{"id":{"replica_id":0,"value":1102},"start":14581,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1557}}},{"id":{"replica_id":0,"value":1256},"start":14611,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1558}}},{"id":{"replica_id":0,"value":1257},"start":15734,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1559}}},{"id":{"replica_id":0,"value":1545},"start":15800,"metadata":{"role":"assistant","status":"Pending","timestamp":{"replica_id":0,"value":1560}}},{"id":{"replica_id":0,"value":1546},"start":15801,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1561}}}],"summary":"Next.js Script Tag Issue Fix","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":2551},"icon":"File","label":"website/posts/changelog-and-friends-frontend-ai.md","metadata":{"path":"website/posts/changelog-and-friends-frontend-ai.md"}},{"range":{"start":2552,"end":3223},"icon":"File","label":"website/mdx-components.js","metadata":{"path":"website/mdx-components.js"}},{"range":{"start":3224,"end":4285},"icon":"File","label":"website/contentlayer.config.js","metadata":{"path":"website/contentlayer.config.js"}},{"range":{"start":10108,"end":11269},"icon":"File","label":"website/contentlayer.config.js","metadata":{"path":"website/contentlayer.config.js"}},{"range":{"start":12529,"end":13133},"icon":"File","label":"website/mdx-components.js","metadata":{"path":"website/mdx-components.js"}}]}