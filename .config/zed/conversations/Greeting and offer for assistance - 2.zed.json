{"id":"fc814825-e217-4baa-bc75-45c2e0f2d52a","zed":"context","version":"0.4.0","text":"\n\n\nHey hey!\nHey there! How can I assist you today?\nDo you know about Tiptap and Prosemirror?\nYes, I'm familiar with both Tiptap and ProseMirror!\n\n### ProseMirror\nProseMirror is a rich-text editor framework for building web-based text editors. It provides a lot of flexibility and control over the editor's behavior and content. ProseMirror is built around the concept of \"documents\" and \"steps,\" which allows for complex, collaborative editing features. Some key aspects of ProseMirror include:\n\n- **Schema:** Defines the structure of the document (e.g., nodes like paragraphs, headings, and marks like bold, italic).\n- **State Management:** Handles the state of the editor, including the current document, selection, and active marks.\n- **Commands:** Functions that change the state of the editor.\n- **Plugins:** Extend the functionality of the editor by hooking into various aspects of its lifecycle and behavior.\n\n### Tiptap\nTiptap is a headless, developer-friendly rich-text editor framework built on top of ProseMirror. It aims to provide a simpler and more modern interface for working with ProseMirror while still leveraging its powerful features. Tiptap focuses on being extendable and customizable, making it easier for developers to build rich text editors with a lot less boilerplate code than directly using ProseMirror. Key features of Tiptap include:\n\n- **Extensions:** Pre-built and custom extensions to easily add new functionality or nodes to the editor.\n- **Reactivity:** Built with modern JavaScript frameworks in mind (e.g., Vue.js, React) and provides reactivity out of the box.\n- **Service-oriented architecture:** Makes it easier to manage complex editor behavior.\n\n### When to Use Which?\n- **ProseMirror:** Use it if you need granular control over the editor's behavior and are comfortable working with lower-level APIs. It's ideal for complex use cases where you need to implement custom functionalities that are deeply integrated with the editor.\n- **Tiptap:** Use it if you prefer a simpler, higher-level API that abstracts away much of the complexity of ProseMirror. It's ideal for rapid development and for cases where you don't need to implement highly custom behavior.\n\nWould you like more specific information on how to use either of them, or do you have other questions?\nHere's my sidebar code: \n```tsx taskpage/components/Chrome/SideBar/index.tsx\n'use client'\n\nimport { Logo } from '@/components/Logo'\nimport Link from 'next/link'\nimport { WorkspaceSelect } from '@/components/Chrome/WorkspaceSelect'\nimport { SearchBox } from '@/components/Chrome/SearchBox'\nimport { Avatar } from '@/components/Avatar'\nimport { IconButton } from '@/components/IconButton'\nimport { Panes, Pane } from './Panes'\nimport { Nav } from './Nav'\nimport { InboxIcon } from '@/icons/InboxIcon'\nimport { OfficeIcon } from '@/icons/OfficeIcon'\nimport { UsersIcon } from '@/icons/UsersIcon'\nimport { InvoiceIcon } from '@/icons/InvoiceIcon'\nimport { LockIcon } from '@/icons/LockIcon'\nimport { SessionUser, WorkspaceDescription } from '@/lib/client/types'\nimport { LeftArrowIcon } from '@/icons/LeftArrowIcon'\nimport { GearIcon } from '@/icons/GearIcon'\nimport { useWorkspaceSelection } from '@/components/Chrome/WorkspaceContext'\nimport { ReactNode } from 'react'\nimport { PlusIcon } from '@/icons/PlusIcon'\nimport { addPage } from '@/app/(main)/workspaces/[workspaceSlug]/pages/actions'\nimport { useRouter } from 'next/navigation'\n\nexport const SideBar = ({\n  user,\n  workspaces,\n  pages\n}: {\n  user: SessionUser\n  workspaces: WorkspaceDescription[]\n  pages: ReactNode\n}) => {\n  const { workspace, returnPathname } = useWorkspaceSelection()\n  const router = useRouter()\n\n  return (\n    <Panes>\n      <Pane url=\"/\">\n        <Pane.Header>\n          <div className=\"-mx-1 -mt-1\">\n            <WorkspaceSelect workspaces={workspaces} />\n          </div>\n          <SearchBox />\n        </Pane.Header>\n        <Pane.Pages>\n          <Pane.Page>\n            <Nav.Item href={`/workspaces/${workspace.slug}/tasks`}>\n              <InboxIcon />\n              My tasks\n            </Nav.Item>\n            <Nav.Group>\n              <Nav.Heading\n                tools={\n                  <IconButton\n                    icon={<PlusIcon size={16} />}\n                    size=\"small\"\n                    onClick={async () => {\n                      const newPage = await addPage(workspace.id)\n                      router.push(\n                        `/workspaces/${workspace.slug}/pages/${newPage.slug}`\n                      )\n                    }}\n                  />\n                }\n              >\n                Pages\n              </Nav.Heading>\n              {pages}\n            </Nav.Group>\n          </Pane.Page>\n        </Pane.Pages>\n        <Pane.Footer>\n          <div className=\"flex gap-1\">\n            <span className=\"flex grow p-0.5\">\n              <Logo href=\"/\" />\n            </span>\n            <IconButton\n              as={Link}\n              icon={<GearIcon />}\n              size=\"large\"\n              href={`/workspaces/${workspace.slug}/settings/personal`}\n            />\n          </div>\n        </Pane.Footer>\n      </Pane>\n      <Pane url={`/workspaces/${workspace.slug}/settings`}>\n        <Pane.Header>\n          <div className=\"flex items-center gap-0.5\">\n            <IconButton\n              as={Link}\n              icon={<LeftArrowIcon />}\n              size=\"large\"\n              href={returnPathname}\n            />\n            <span className=\"text-xl font-semibold\">Settings</span>\n          </div>\n        </Pane.Header>\n        <Pane.Pages>\n          <Pane.Page>\n            <Nav.Group>\n              <Nav.Heading>Personal</Nav.Heading>\n              <Nav.Item\n                href={`/workspaces/${workspace.slug}/settings/personal`}\n              >\n                <Avatar user={user} size=\"xs\" noLink={true} />\n                My preferences\n              </Nav.Item>\n            </Nav.Group>\n            {workspace && (\n              <Nav.Group>\n                <Nav.Heading>{workspace.name}</Nav.Heading>\n                <Nav.Item\n                  href={`/workspaces/${workspace.slug}/settings/general`}\n                  prefetch={false}\n                >\n                  <OfficeIcon />\n                  General\n                </Nav.Item>\n                <Nav.Item\n                  href={`/workspaces/${workspace.slug}/settings/members`}\n                  prefetch={false}\n                >\n                  <UsersIcon />\n                  Members\n                </Nav.Item>\n                <Nav.Item\n                  href={`/workspaces/${workspace.slug}/settings/billing`}\n                  prefetch={false}\n                >\n                  <InvoiceIcon />\n                  Billing\n                </Nav.Item>\n                <Nav.Item\n                  href={`/workspaces/${workspace.slug}/settings/security`}\n                  prefetch={false}\n                >\n                  <LockIcon />\n                  Security\n                </Nav.Item>\n              </Nav.Group>\n            )}\n          </Pane.Page>\n        </Pane.Pages>\n      </Pane>\n    </Panes>\n  )\n}\n```\nI'd like to modify this so that when \"Add page\" is clicked that it creates the new page and focuses the cursor on the tiptap editor. How should I go about this?\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":216}},"image_offsets":[]},{"id":{"replica_id":0,"value":8},"start":12,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":217}},"image_offsets":[]},{"id":{"replica_id":0,"value":9},"start":51,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":218}},"image_offsets":[]},{"id":{"replica_id":0,"value":42},"start":93,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":219}},"image_offsets":[]},{"id":{"replica_id":0,"value":43},"start":2304,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":220}},"image_offsets":[]}],"summary":"Greeting and offer for assistance","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default"},{"range":{"start":2329,"end":7136},"icon":"File","label":"taskpage/components/Chrome/SideBar/index.tsx"}]}