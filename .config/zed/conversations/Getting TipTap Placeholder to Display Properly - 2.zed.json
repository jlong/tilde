{"id":"82b95544-2a78-4d98-a4a1-6e8229d2fe61","zed":"context","version":"0.4.0","text":"\n\n\nI'm using the TipTap placeholder extension, but I haven't included the TipTap CSS. What do I need to do to get the placeholder to show up?\nIf you're using the TipTap Placeholder extension and you want the placeholder text to appear, you need to ensure that the necessary CSS styles are applied. TipTap's Placeholder extension relies on specific CSS to display the placeholder text correctly. Here’s what you can do:\n\n1. **Include TipTap CSS:**\n   Although TipTap does not provide a centralized CSS file for all features, you need to make sure that your own styles are sufficient or that you include any recommended styles from the documentation.\n\n2. **Custom CSS:**\n   If you are not including any default styles or if TipTap documentation suggests you need custom styling, add your own CSS to handle the placeholder appearance. A typical style might look like this:\n\n   ```css\n   .ProseMirror .placeholder:before {\n     content: attr(data-placeholder);\n     color: #aaa;\n     pointer-events: none;\n     display: block; /* or inline depending on your needs */\n     height: 0; /* This helps to not disrupt normal content flow */\n   }\n   ```\n\n3. **Ensure Selector Accuracy:**\n   Make sure the CSS selector targets the placeholder correctly. The `placeholder:before` selector might be altered based on the specific setup or version of your TipTap setup.\n\n4. **TipTap Setup:**\n   Make sure you have correctly set up the Placeholder extension in your TipTap editor instance. Ensure the extension is initialized and configured properly, for example:\n\n   ```javascript\n   import Placeholder from '@tiptap/extension-placeholder';\n\n   const editor = new Editor({\n     extensions: [\n       // other extensions\n       Placeholder.configure({\n         placeholder: 'Type here…',\n       }),\n     ],\n   });\n   ```\n\n5. **Inspect Element:**\n   Use browser developer tools to inspect the editor area. Check if the placeholder element is inserted into the DOM correctly and that no other CSS is overriding your placeholder styles.\n\nBy ensuring the correct CSS is applied and the Placeholder extension is properly configured, the placeholder should display as intended in your TipTap editor setup.\nHow do I do this with Tailwind?\nTo style the TipTap placeholder using Tailwind CSS, you'll need to add custom styles because Tailwind doesn't natively support pseudo-elements like `::before` or content generation (`content: attr(...)`). However, you can still create a utility-based approach using Tailwind's powerful utility functions and some custom CSS.\n\nHere's a step-by-step approach:\n\n1. **Add a Custom Style:**\n   Add custom CSS to your project to handle the `::before` pseudo-element for the placeholder. You can extend Tailwind with custom styles directly in your CSS file or through `@layer` in your Tailwind setup:\n\n   ```css\n   @layer utilities {\n     .tiptap-placeholder::before {\n       content: attr(data-placeholder);\n       color: theme('colors.gray.400'); /* Use Tailwind color */\n       pointer-events: none;\n       display: block; /* Or inline, based on what you need */\n       height: 0; /* Prevent layout shifts */\n     }\n   }\n   ```\n\n2. **Configure the Placeholder:**\n   In your TipTap editor setup, make sure you configure the Placeholder extension correctly:\n\n   ```javascript\n   import { Editor } from '@tiptap/core';\n   import Placeholder from '@tiptap/extension-placeholder';\n\n   const editor = new Editor({\n     content: '',\n     extensions: [\n       // other extensions\n       Placeholder.configure({\n         placeholder: 'Type here…',\n         placeholderClass: 'tiptap-placeholder',\n       }),\n     ],\n   });\n   ```\n\n3. **Ensure Your Custom CSS Loads:**\n   Make sure that the custom CSS part of your Tailwind configuration is loaded in your project so that the `tiptap-placeholder` class is recognized.\n\n4. **Tailwind Configuration (Optional):**\n   You might want to adjust or add to your Tailwind CSS configuration (`tailwind.config.js`) if you are using a custom color palette or additional utility classes:\n\n   ```javascript\n   module.exports = {\n     theme: {\n       extend: {\n         colors: {\n           // Custom colors or any extensions\n         },\n       },\n     },\n   }\n   ```\n\nBy setting up a custom style in conjunction with Tailwind, you can effectively manage how the placeholder text appears in your TipTap editor. The key is using the `Placeholder.configure` method to apply a specific class that Tailwind utilities can style, and handling the `::before` pseudo-element with plain CSS.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":83}},"image_offsets":[]},{"id":{"replica_id":0,"value":23},"start":142,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":84}},"image_offsets":[]},{"id":{"replica_id":0,"value":24},"start":2186,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":85}},"image_offsets":[]},{"id":{"replica_id":0,"value":75},"start":2218,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":86}},"image_offsets":[]},{"id":{"replica_id":0,"value":76},"start":4524,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":87}},"image_offsets":[]}],"summary":"Getting TipTap Placeholder to Display Properly","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default"}]}